#%RAML 1.0
---
description: |
  Policy Groups API

  Nodes have a many to one relationship with policies, based on their group
  and policy. A policy is generally named after the functional role a host
  preforms, such as "appserver", "chatserver", "load balancer", etc. A group
  defines a set of hosts in a deployment unit, which may map to an
  organization's environments (e.g., dev, qa, staging, production), or may
  represent more granular phases (e.g., a change may go to a "canary" group,
  and then be rolled through various clusters within the production
  environment, so you'd have "prod-canary", "prod-cluster-1", etc.).
type: list_endpoint

get:
  description: List all policy groups on the server, showing the active revision for each policy.
  responses:
    200:
      body:
        example: |
          {
            "dev": {
              "uri": "https://chef.example/organizations/org1/policy_groups/dev",
              "policies": {
                "aar": {
                  "revision_id": "95040c199302c85c9ccf1bcc6746968b820b1fa25d92477ea2ec5386cd58b9c5"
                },
                "jenkins": {
                  "revision_id": "613f803bdd035d574df7fa6da525b38df45a74ca82b38b79655efed8a189e073"
                }
              }
            },
            "production": {
              "uri": "https://chef.example/organizations/org1/policy_groups/production",
              "policies": {
                "aar": {
                  "revision_id": "95040c199302c85c9ccf1bcc6746968b820b1fa25d92477ea2ec5386cd58b9c5"
                }
              }
            }
          }

/{policy_group}:
  type: item_endpoint
  uriParameters:
    policy_group:
      displayName: policy group
      type: string

  get:
    description: Returns the policy revisions currently applied to the given policy group.
    responses:
      200:
        body:
          example: |
            {
              "uri": "https://chef.example/organizations/org1/policy_groups/dev",
              "policies": {
                "aar": {
                  "revision_id": "95040c199302c85c9ccf1bcc6746968b820b1fa25d92477ea2ec5386cd58b9c5"
                },
                "jenkins": {
                  "revision_id": "613f803bdd035d574df7fa6da525b38df45a74ca82b38b79655efed8a189e073"
                }
              }
            }

  delete:
    description: Deletes the policy group and disassciates it from any policy revisions.
    responses:
      200:
        body:
          example: |
            {
              "uri": "https://chef.example/organizations/org1/policy_groups/dev",
              "policies": {
                "aar": {
                  "revision_id": "95040c199302c85c9ccf1bcc6746968b820b1fa25d92477ea2ec5386cd58b9c5"
                },
                "jenkins": {
                  "revision_id": "613f803bdd035d574df7fa6da525b38df45a74ca82b38b79655efed8a189e073"
                }
              }
            }

  /policies/{policy}:
    description: |
      Manage policies as they are associated to policy groups. Though policies
      and policy groups are independent objects, in most cases it is desirable to
      manage them together. This endpoint allows you to show/create/update the
      policy for the given policy group in a single call.

      Policies and policy groups are separate objects for the purposes of
      authorization. This allows administrators to restrict access to
      the policies for certain kinds of nodes (perhaps because they handle
      sensitive data) or in certain group (e.g., if changes to production
      require sign-off). The requestor must have access to both the policy
      and policy group in order for the request to be authorized. If the
      requestor does not have access on both objects for the requested action,
      the server will return a 403 response.
    type: item_endpoint
    uriParameters:
      policy:
        displayName: Name of the policy.
        type: string

    get:
      description: Return the policy document for the given policy group and policy name.
      responses:
        200:
          body:
            example: !include ../examples/policy.json
        404:
          description: There is no policy document associated for this policy name and policy group.

    put:
      description: |
        Create or update the policy document for the given policy group and
        policy name. If no policy group with the given name exists, it will be
        created. If no policy with the given revision_id exists, it will be
        created from the document in the request body. If a policy with that
        revision_id exists, the CINC Server simply associates that revision id
        with the given policy group.

        When successful, the document that was created or updated is returned.
      body:
        example: !include ../examples/policy.json
      responses:
        201:
          body:
            example: !include ../examples/policy.json
        200:
          body:
            example: !include ../examples/policy.json

    delete:
      description: |
        Deletes the association between the given policy name, policy group, and
        policy revision. The policy group and policy revision are not themselves
        deleted from the server, only the association is removed. Following this
        call, a subsequent GET to the same URI will return 404. When successful,
        the policy document revision that was previously associated to the policy
        name and policy group is returned.
      responses:
        200:
          body:
            example: !include ../examples/policy.json
